import json
import logging
import os
import platform
import random
import shutil
import subprocess
import traceback
import webbrowser

import requests
from minecraft_launcher_lib.utils import get_version_list
from PyQt5.QtCore import QSize, Qt, QTimer
from PyQt5.QtGui import QIcon, QKeySequence
from PyQt5.QtWidgets import (
    QApplication,
    QComboBox,
    QDialog,
    QFileDialog,
    QFrame,
    QHBoxLayout,
    QInputDialog,
    QLabel,
    QLineEdit,
    QMainWindow,
    QMessageBox,
    QProgressBar,
    QPushButton,
    QShortcut,
    QStackedWidget,
    QTabWidget,
    QToolButton,
    QVBoxLayout,
    QWidget,
)

from .. import ely
from ..config import AUTHLIB_JAR_PATH, MINECRAFT_DIR, SKINS_DIR
from ..ely_by_skin_manager import ElyBySkinManager
from ..ely_skin_manager import ElySkinManager
from ..translator import Translator
from ..util import (
    download_authlib_injector,
    generate_random_username,
    load_settings,
    resource_path,
    save_settings,
)
from .custom_line_edit import CustomLineEdit
from .threads.launch_thread import LaunchThread
from .widgets.mod_loader_tab import ModLoaderTab
from .widgets.modpack_tab import ModpackTab
from .widgets.mods_tab import ModsTab
from .widgets.settings_tab import SettingsTab


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ely_session = None
        self.setWindowTitle('16Launcher 1.0.2')
        self.setFixedSize(1280, 720)
        self.setWindowIcon(QIcon(resource_path('assets/icon.ico')))
        self.translator = Translator()
        self.motd_messages = [
            '–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã, –ª–µ–≥–µ–Ω–¥–∞!',
            '–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç, –µ—Å–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è ‚ù§Ô∏è',
            '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å!',
            '–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—à—å —ç—Ç–æ üòé',
            '–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –±–ª–æ–∫–∞–º?',
            '–≠–Ω–¥–µ—Ä–º–µ–Ω—ã —Å–æ–≤–µ—Ç—É—é—Ç: –≤—Å–µ–≥–¥–∞ –Ω–æ—Å–∏—à—å —Å —Å–æ–±–æ–π —ç–Ω–¥–µ—Ä-–∂–µ–º—á—É–≥‚Ä¶ –∏ –∑–æ–Ω—Ç–∏–∫!',
            '–°–æ–≤–µ—Ç –æ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞: –∞–ª–º–∞–∑—ã –ª—é–±—è—Ç —Ç–∏—à–∏–Ω—É‚Ä¶ –∏ —Ñ–∞–∫–µ–ª—ã!',
            '–≠–Ω–¥–µ—Ä–º–µ–Ω —Å–º–æ—Ç—Ä–∏—Ç? –ù–µ —Å–º–æ—Ç—Ä–∏ –≤ –æ—Ç–≤–µ—Ç!',
            '–õ–∞–≤–∞ –æ–ø–∞—Å–Ω–∞, –Ω–æ –æ–±—Å–∏–¥–∏–∞–Ω —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç!',
            '–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º? –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ—Ç –ª–∏ –¢–ù–¢!',
            '–õ–µ—Ç–∞—Ç—å –Ω–∞ –≠–ª–∏—Ç—Ä–∞—Ö? –ü–æ–º–Ω–∏: —Ä–µ–º–æ–Ω—Ç –Ω—É–∂–µ–Ω!',
            '–ó–µ–ª—å–µ–≤–∞—Ä–µ–Ω–∏–µ? –ù–µ –ø–µ—Ä–µ–ø—É—Ç–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã!',
            '–õ–æ–≤–∏ —Ä—ã–±—É ‚Äî –º–æ–∂–µ—Ç, –∫–ª—é–Ω–µ—Ç –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞!',
        ]

        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = load_settings()
        self.setup_ely_auth()
        self.last_username = self.settings.get('last_username', '')
        self.favorites = self.settings.get('favorites', [])
        self.last_version = self.settings.get('last_version', '')
        self.last_loader = self.settings.get('last_loader', 'vanilla')

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.launch_thread = LaunchThread(self)
        self.launch_thread.log_signal.connect(self.append_console_log)
        self.launch_thread.state_update_signal.connect(self.state_update)
        self.launch_thread.progress_update_signal.connect(self.update_progress)
        self.launch_thread.close_launcher_signal.connect(self.close_launcher)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç–∫–µ–π Ctrl+D
        self.ctrl_d_shortcut = QShortcut(QKeySequence('Ctrl+D'), self)
        self.ctrl_d_shortcut.activated.connect(self.show_funny_message)

        self.ctrl_d_shortcut = QShortcut(QKeySequence('Ctrl+Q'), self)
        self.ctrl_d_shortcut.activated.connect(self.show_funny_message_1)

        self.ctrl_d_shortcut = QShortcut(QKeySequence('Ctrl+R'), self)
        self.ctrl_d_shortcut.activated.connect(self.show_funny_message_2)

        self.ctrl_d_shortcut = QShortcut(QKeySequence('Ctrl+G'), self)
        self.ctrl_d_shortcut.activated.connect(self.show_funny_message_3)

        self.main_container = QWidget(self)
        self.setCentralWidget(self.main_container)

        self.main_layout = QHBoxLayout(self.main_container)
        self.main_container.setLayout(self.main_layout)

        self.setup_sidebar()
        self.stacked_widget = QStackedWidget()
        self.main_layout.addWidget(self.stacked_widget)

        self.tab_widget = QWidget()
        self.tab_layout = QVBoxLayout(self.tab_widget)
        self.tab_layout.setContentsMargins(15, 15, 15, 15)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –ü–ï–†–ï–î –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        self.game_tab = QWidget()  # –°–æ–∑–¥–∞–µ–º game_tab –ø–µ—Ä–≤—ã–º
        self.setup_game_tab()  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

        self.mods_tab = ModsTab(self)
        self.modpacks_tab = ModpackTab(self)

        self.tabs = QTabWidget()
        self.tabs.addTab(self.game_tab, '–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã')  # –¢–µ–ø–µ—Ä—å game_tab —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.tabs.addTab(self.mods_tab, '–ú–æ–¥—ã')
        self.tabs.addTab(self.modpacks_tab, '–ú–æ–∏ —Å–±–æ—Ä–∫–∏')

        self.tab_layout.addWidget(self.tabs)

        self.setup_modloader_tabs()

        self.stacked_widget.addWidget(self.tab_widget)
        self.settings_tab = SettingsTab(self.translator, self)
        self.stacked_widget.addWidget(self.settings_tab)
        self.stacked_widget.setCurrentIndex(0)
        self.tabs.currentChanged.connect(self.handle_tab_changed)

        self.apply_dark_theme()

    def retranslate_ui(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–æ–º"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.setWindowTitle(self.translator.tr('window_title'))

        # –í–∫–ª–∞–¥–∫–∞ –∏–≥—Ä—ã
        self.username.setPlaceholderText(self.translator.tr('username_placeholder'))
        self.random_name_button.setToolTip(
            self.translator.tr('generate_random_username'),
        )

        # –í–µ—Ä—Å–∏–∏ –∏ –º–æ–¥–ª–æ–∞–¥–µ—Ä—ã
        self.version_type_select.setItemText(0, self.translator.tr('all versions'))
        self.version_type_select.setItemText(1, self.translator.tr('favorites'))

        self.loader_select.setItemText(0, self.translator.tr('vanilla'))
        self.loader_select.setItemText(1, self.translator.tr('forge'))
        self.loader_select.setItemText(2, self.translator.tr('fabric'))
        self.loader_select.setItemText(3, self.translator.tr('optifine'))

        # –ö–Ω–æ–ø–∫–∏
        self.start_button.setText(self.translator.tr('launch_button'))
        self.ely_login_button.setText(self.translator.tr('ely_login_button'))
        self.change_skin_button.setText

    def handle_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫"""
        if self.tabs.tabText(index) == '–ú–æ–¥—ã' and not hasattr(self, 'mods_tab'):
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –º–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            self.mods_tab = ModsTab(self)
            self.tabs.removeTab(index)
            self.tabs.insertTab(index, self.mods_tab, '–ú–æ–¥—ã')
            self.tabs.setCurrentIndex(index)

    def setup_sidebar(self):
        """–°–æ–∑–¥–∞—ë—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è"""
        # –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏
        self.sidebar_container = QWidget()
        self.sidebar_layout = QHBoxLayout(self.sidebar_container)
        self.sidebar_layout.setContentsMargins(0, 0, 0, 0)
        self.sidebar_layout.setSpacing(0)

        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.sidebar = QFrame()
        self.sidebar.setFrameShape(QFrame.StyledPanel)
        self.sidebar.setFixedWidth(100)
        sidebar_content_layout = QVBoxLayout(self.sidebar)
        sidebar_content_layout.setContentsMargins(10, 10, 10, 10)
        sidebar_content_layout.setSpacing(20)

        # –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å"
        self.play_button = QPushButton()
        self.play_button.setIcon(QIcon(resource_path('assets/play64.png')))
        self.play_button.setIconSize(QSize(64, 64))
        self.play_button.setFixedSize(75, 75)
        self.play_button.setStyleSheet("""
            QPushButton {
                border: none;
                background-color: transparent;
                font-size: 14px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #444444;
                border-radius: 5px;
            }
        """)
        self.play_button.clicked.connect(self.show_game_tab)
        sidebar_content_layout.addWidget(self.play_button, alignment=Qt.AlignCenter)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.settings_button = QPushButton()
        self.settings_button.setIcon(QIcon(resource_path('assets/set64.png')))
        self.settings_button.setIconSize(QSize(64, 64))
        self.settings_button.setFixedSize(75, 75)
        self.settings_button.setStyleSheet(self.play_button.styleSheet())
        self.settings_button.clicked.connect(self.show_settings_tab)
        sidebar_content_layout.addWidget(self.settings_button, alignment=Qt.AlignCenter)

        sidebar_content_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ "–¢–µ–ª–µ–≥—Ä–∞–º"
        self.telegram_button = QPushButton()
        self.telegram_button.setIcon(QIcon(resource_path('assets/tg.png')))
        self.telegram_button.setIconSize(QSize(64, 64))
        self.telegram_button.setFixedSize(75, 75)
        self.telegram_button.setStyleSheet(self.play_button.styleSheet())
        self.telegram_button.clicked.connect(
            lambda: webbrowser.open('https://t.me/of16launcher'),
        )
        sidebar_content_layout.addWidget(self.telegram_button, alignment=Qt.AlignCenter)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
        self.support_button = QPushButton()
        self.support_button.setIcon(QIcon(resource_path('assets/support64.png')))
        self.support_button.setIconSize(QSize(64, 64))
        self.support_button.setFixedSize(75, 75)
        self.support_button.setStyleSheet(self.play_button.styleSheet())
        self.support_button.clicked.connect(
            lambda: webbrowser.open('https://www.donationalerts.com/r/16steyy'),
        )
        sidebar_content_layout.addWidget(self.support_button, alignment=Qt.AlignCenter)

        # –ö–Ω–æ–ø–∫–∞-—Å–≤—ë—Ä—Ç–∫–∞ (–≤–Ω–µ –ø–∞–Ω–µ–ª–∏!)
        self.toggle_sidebar_button = QPushButton()
        self.toggle_sidebar_button.setIcon(QIcon(resource_path('assets/toggle.png')))
        self.toggle_sidebar_button.setIconSize(QSize(24, 24))
        self.toggle_sidebar_button.setFixedSize(30, 30)
        self.toggle_sidebar_button.setStyleSheet("""
            QPushButton {
                background-color: #444444;
                color: white;
                border: none;
                border-top-right-radius: 5px;
                border-bottom-right-radius: 5px;
            }
            QPushButton:hover {
                background-color: #666666;
            }
        """)
        self.toggle_sidebar_button.clicked.connect(self.toggle_sidebar)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.sidebar_layout.addWidget(self.sidebar)
        self.sidebar_layout.addWidget(self.toggle_sidebar_button)

        self.main_layout.addWidget(self.sidebar_container)

    def update_login_button_text(self):
        if hasattr(self, 'access_token') and self.access_token:
            self.ely_login_button.setText('–í—ã–π—Ç–∏ –∏–∑ Ely.by')
        else:
            self.ely_login_button.setText('–í–æ–π—Ç–∏ —Å Ely.by')

    def show_game_tab(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å –∏–≥—Ä–æ–π"""
        self.stacked_widget.setCurrentIndex(0)
        self.tabs.setCurrentIndex(
            0,
        )  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ (–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã)

    def toggle_theme(self):
        current_theme = getattr(self, 'current_theme', 'dark')
        new_theme = 'light' if current_theme == 'dark' else 'dark'

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        self.apply_theme(new_theme == 'dark')

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
        icon_path = 'assets/sun.png' if new_theme == 'light' else 'assets/moon.png'
        self.theme_button.setIcon(QIcon(resource_path(icon_path)))

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ—ë
        if hasattr(self.settings_tab, 'theme_button'):
            self.settings_tab.theme_button.setIcon(QIcon(resource_path(icon_path)))
            self.settings_tab.theme_button.setText(
                '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' if new_theme == 'light' else '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞',
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
        self.settings['theme'] = new_theme
        save_settings(self.settings)

    def show_settings_tab(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        self.stacked_widget.setCurrentIndex(1)

    def append_console_log(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if hasattr(self, "console_output"):
            self.console_output.appendPlainText(message)


    def setup_game_tab(self):
        layout = QVBoxLayout(self.game_tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        form_layout = QVBoxLayout()
        form_layout.setSpacing(15)

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∏–º—è –∏–≥—Ä–æ–∫–∞
        top_row = QHBoxLayout()
        top_row.setSpacing(10)

        self.username = CustomLineEdit(self.game_tab)
        self.username.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
        self.username.setMinimumHeight(40)
        self.username.setText(self.last_username)
        self.username.setStyleSheet('padding-right: 80px;')
        top_row.addWidget(self.username)

        self.random_name_button = QToolButton(self.username)
        self.random_name_button.setIcon(QIcon(resource_path('assets/random.png')))
        self.random_name_button.setIconSize(QSize(45, 45))
        self.random_name_button.setCursor(Qt.PointingHandCursor)
        self.random_name_button.setFixedSize(60, 30)
        self.random_name_button.clicked.connect(self.set_random_username)
        self.username.set_button(self.random_name_button)

        form_layout.addLayout(top_row)

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤–µ—Ä—Å–∏—è/–º–æ–¥–ª–æ–∞–¥–µ—Ä
        version_row = QHBoxLayout()
        version_row.setSpacing(10)

        self.version_type_select = QComboBox(self.game_tab)
        self.version_type_select.setMinimumHeight(45)
        self.version_type_select.setFixedWidth(250)
        self.version_type_select.addItem('–í—Å–µ –≤–µ—Ä—Å–∏–∏')
        self.version_type_select.addItem('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ')
        self.version_type_select.currentTextChanged.connect(self.update_version_list)
        version_row.addWidget(self.version_type_select)

        self.loader_select = QComboBox(self.game_tab)
        self.loader_select.setMinimumHeight(45)
        self.loader_select.setFixedWidth(250)
        self.loader_select.addItem('Vanilla', 'vanilla')
        self.loader_select.addItem('Forge', 'forge')
        self.loader_select.addItem('Fabric', 'fabric')
        self.loader_select.addItem('OptiFine', 'optifine')
        self.loader_select.addItem('Quilt', 'quilt')
        loader_index = self.loader_select.findData(self.last_loader)
        if loader_index >= 0:
            self.loader_select.setCurrentIndex(loader_index)
        version_row.addWidget(self.loader_select)

        self.version_select = QComboBox(self.game_tab)
        self.version_select.setMinimumHeight(45)
        self.version_select.setFixedWidth(250)
        version_row.addWidget(self.version_select)

        self.favorite_button = QPushButton('‚òÖ')
        self.favorite_button.setFixedSize(45, 45)
        self.favorite_button.setCheckable(True)
        self.favorite_button.clicked.connect(self.toggle_favorite)
        version_row.addWidget(self.favorite_button)

        form_layout.addLayout(version_row)

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∫–Ω–æ–ø–∫–∏
        bottom_row = QHBoxLayout()
        bottom_row.setSpacing(10)

        self.start_button = QPushButton('–ò–≥—Ä–∞—Ç—å')
        self.start_button.setMinimumHeight(50)
        self.start_button.clicked.connect(self.launch_game)
        bottom_row.addWidget(self.start_button)

        self.change_skin_button = QPushButton('–°–º–µ–Ω–∏—Ç—å —Å–∫–∏–Ω (Ely.by)')
        self.change_skin_button.setMinimumHeight(50)
        self.change_skin_button.setVisible(False)
        self.change_skin_button.clicked.connect(self.change_ely_skin)

        self.ely_login_button = QPushButton('–í–æ–π—Ç–∏ —Å Ely.by')
        self.ely_login_button.setMinimumHeight(50)
        self.ely_login_button.clicked.connect(self.handle_ely_login)

        bottom_row.addWidget(self.change_skin_button)
        bottom_row.addWidget(self.ely_login_button)

        layout.addLayout(form_layout)
        layout.addLayout(bottom_row)
        
        #–∫–æ–Ω—Å–æ–ª—å
        from PyQt5.QtWidgets import QPlainTextEdit, QSizePolicy
        self.console_output = QPlainTextEdit(self.game_tab)
        self.console_output.setReadOnly(True)
        self.console_output.setVisible(False)
        self.console_output.setFixedHeight(100)
        self.console_output.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.console_output.setStyleSheet("""
            QPlainTextEdit {
                background-color: #1e1e1e;
                color: #FFFFFF;
                font-family: Consolas, monospace;
                font-size: 11px;
                border: 1px solid #444;
                border-radius: 5px;
                padding: 4px;
            }
        """)

        console_container = QVBoxLayout()
        console_container.addWidget(self.console_output)
        layout.addLayout(console_container)


        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.start_progress_label = QLabel(self.game_tab)
        self.start_progress_label.setVisible(False)
        layout.addWidget(self.start_progress_label)

        self.start_progress = QProgressBar(self.game_tab)
        self.start_progress.setMinimumHeight(20)
        self.start_progress.setVisible(False)
        layout.addWidget(self.start_progress)

        self.update_version_list()
        if self.last_version:
            index = self.version_select.findText(self.last_version)
            if index >= 0:
                self.version_select.setCurrentIndex(index)

        loader_index = self.loader_select.findData(self.last_loader)
        if loader_index >= 0:
            self.loader_select.setCurrentIndex(loader_index)



    def setup_ely_auth(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        self.ely_session = None
        try:
            if ely.is_logged_in():
                self.ely_session = {
                    'username': ely.username(),
                    'uuid': ely.uuid(),
                    'token': ely.token(),
                }
                self.username.setText(self.ely_session['username'])
                self.update_ely_ui(True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–∫–∏–Ω–∞ —á–µ—Ä–µ–∑ authlib
                try:
                    texture_info = requests.get(
                        f'https://authserver.ely.by/session/profile/{self.ely_session["uuid"]}',
                        headers={
                            'Authorization': f'Bearer {self.ely_session["token"]}',
                        },
                    ).json()

                    if 'textures' in texture_info:
                        skin_url = texture_info['textures'].get('SKIN', {}).get('url')
                        if skin_url:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–Ω –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–∞—É–Ω—á–µ—Ä–µ
                            skin_data = requests.get(skin_url).content
                            os.makedirs(SKINS_DIR, exist_ok=True)
                            with open(
                                os.path.join(
                                    SKINS_DIR,
                                    f'{self.ely_session["username"]}.png',
                                ),
                                'wb',
                            ) as f:
                                f.write(skin_data)
                except Exception as e:
                    logging.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–Ω–∞: {e}')

        except Exception as e:
            logging.exception(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ Ely.by: {e}')

    def update_ely_ui(self, logged_in):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if logged_in:
            self.ely_login_button.setVisible(False)
            self.change_skin_button.setVisible(True)
            self.change_skin_button.setStyleSheet("""
                QPushButton {
                    background-color: #28a745;
                    color: white;
                    padding: 8px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #218838;
                }
            """)
            self.change_skin_button.setText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–º')
        else:
            self.ely_login_button.setVisible(True)
            self.change_skin_button.setVisible(False)

    def setup_ely_auth(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫–∏–Ω"""
        try:
            if ely.is_logged_in():
                self.ely_session = {
                    'username': ely.username(),
                    'uuid': ely.uuid(),
                    'token': ely.token(),
                }
                self.username.setText(self.ely_session['username'])
                self.update_ely_ui(True)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–Ω —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã-–ø—Ä–æ–∫—Å–∏
                texture_url = ElySkinManager.get_skin_texture_url(
                    self.ely_session['username'],
                )
                if texture_url:
                    if ElySkinManager.download_skin(self.ely_session['username']):
                        logging.info('–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω')
                    else:
                        logging.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–Ω')

        except Exception as e:
            logging.exception(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ Ely.by: {e}')

    def handle_ely_login(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞"""
        if hasattr(self, 'ely_session') and self.ely_session:
            self.ely_logout()
        else:
            self.ely_login()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if hasattr(self.settings_tab, 'update_logout_button_visibility'):
            self.settings_tab.update_logout_button_visibility()

    def ely_login(self):
        """–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è"""
        email, ok = QInputDialog.getText(
            self,
            '–í—Ö–æ–¥',
            '–í–≤–µ–¥–∏—Ç–µ email Ely.by:',
            QLineEdit.Normal,
            '',
        )
        if not ok or not email:
            return

        password, ok = QInputDialog.getText(
            self,
            '–í—Ö–æ–¥',
            '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
            QLineEdit.Password,
            '',
        )
        if not ok or not password:
            return

        try:
            self.ely_session = ely.auth_password(email, password)
            self.update_ely_ui(True)
            self.username.setText(self.ely_session['username'])
            QMessageBox.information(self, '–£—Å–ø–µ—à–Ω–æ', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', str(e))
            ely.write_login_data(
                {
                    'username': self.ely_session['username'],
                    'uuid': self.ely_session['uuid'],
                    'token': self.ely_session['token'],
                    'logged_in': True,
                },
            )

    def start_device_auth(self, dialog):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ device code"""
        dialog.close()
        try:
            self.ely_session = ely.auth_device_code()
            self.update_ely_ui(True)
            self.username.setText(self.ely_session['username'])
            QMessageBox.information(
                self,
                '–£—Å–ø–µ—à–Ω–æ',
                f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {self.ely_session["username"]}',
            )
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', str(e))

    def start_credentials_auth(self, dialog):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –ª–æ–≥–∏–Ω—É/–ø–∞—Ä–æ–ª—é"""
        dialog.close()
        email, ok = QInputDialog.getText(self, '–í—Ö–æ–¥', '–í–≤–µ–¥–∏—Ç–µ email Ely.by:')
        if not ok or not email:
            return

        password, ok = QInputDialog.getText(
            self,
            '–í—Ö–æ–¥',
            '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
            QLineEdit.Password,
        )
        if not ok or not password:
            return

        try:
            self.ely_session = ely.auth(email, password)
            ely.write_login_data(
                {
                    'username': self.ely_session['username'],
                    'uuid': self.ely_session['uuid'],
                    'token': self.ely_session['token'],
                    'logged_in': True,
                },
            )
            self.update_ely_ui(True)
            self.username.setText(self.ely_session['username'])
            QMessageBox.information(
                self,
                '–£—Å–ø–µ—à–Ω–æ',
                f'–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {self.ely_session["username"]}',
            )
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', str(e))

    def ely_logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Ely.by"""
        ely.logout()
        self.ely_session = None
        self.update_ely_ui(False)
        self.username.setText('')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if hasattr(self.settings_tab, 'update_logout_button_visibility'):
            self.settings_tab.update_logout_button_visibility()
        QMessageBox.information(self, '–í—ã—Ö–æ–¥', '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Ely.by')

    def open_support_tab(self):
        support_tab = QWidget()
        layout = QVBoxLayout(support_tab)

        # –¢–≤–æ–π —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—à—å —Å–∞–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–º)
        text = QLabel(
            '–ù–∞—à –ª–∞—É–Ω—á–µ—Ä –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∞—É–Ω—á–µ—Ä, –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–∏–∑–∞–π–Ω,\n—Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ‚ù§',
        )
        text.setAlignment(Qt.AlignCenter)
        text.setWordWrap(True)
        layout.addWidget(text)
        text.setFixedSize(700, 900)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"
        donate_button = QPushButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
        donate_button.setFixedSize(200, 50)
        donate_button.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                font-size: 16px;
                border-radius: 10px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        donate_button.clicked.connect(
            lambda: webbrowser.open('https://www.donationalerts.com/r/16steyy'),
        )
        layout.addWidget(donate_button, alignment=Qt.AlignCenter)

        layout.addStretch()

        self.stacked_widget.addWidget(support_tab)
        self.stacked_widget.setCurrentWidget(support_tab)

    def change_ely_skin(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–º –¥–ª—è Ely.by"""
        if not hasattr(self, 'ely_session') or not self.ely_session:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ Ely.by!')
            return

        dialog = QDialog(self)
        dialog.setWindowTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–º')
        dialog.setFixedSize(400, 250)

        layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–∫–∏–Ω–∞
        upload_btn = QPushButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫–∏–Ω')
        upload_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                padding: 12px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        upload_btn.clicked.connect(lambda: self.upload_new_skin(dialog))
        layout.addWidget(upload_btn)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–∫–∏–Ω–∞
        reset_btn = QPushButton('–°–±—Ä–æ—Å–∏—Ç—å —Å–∫–∏–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')
        reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                padding: 12px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        reset_btn.clicked.connect(lambda: self.reset_ely_skin(dialog))
        layout.addWidget(reset_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        manage_btn = QPushButton('–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        manage_btn.setStyleSheet("""
            QPushButton {
                background-color: #007bff;
                color: white;
                padding: 12px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #0069d9;
            }
        """)
        manage_btn.clicked.connect(
            lambda: webbrowser.open(
                f'https://ely.by/skins?username={self.ely_session["username"]}',
            ),
        )
        layout.addWidget(manage_btn)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton('–ó–∞–∫—Ä—ã—Ç—å')
        close_btn.clicked.connect(dialog.close)
        layout.addWidget(close_btn)

        dialog.setLayout(layout)
        dialog.exec_()

    def upload_new_skin(self, parent_dialog):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∫–∏–Ω –Ω–∞ Ely.by"""
        parent_dialog.close()

        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            '–í—ã–±–µ—Ä–∏—Ç–µ PNG-—Ñ–∞–π–ª —Å–∫–∏–Ω–∞ (64x64 –∏–ª–∏ 64x32)',
            '',
            'PNG Images (*.png)',
        )

        if not file_path:
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä

        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        model_type, ok = QInputDialog.getItem(
            self,
            '–¢–∏–ø –º–æ–¥–µ–ª–∏',
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:',
            ['classic', 'slim'],
            0,
            False,
        )

        if not ok:
            return

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–Ω
            success, message = ElySkinManager.upload_skin(
                file_path,
                self.ely_session['token'],
                model_type,
            )

            if success:
                # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–∫–∏–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–∞—É–Ω—á–µ—Ä–µ
                skin_url = ElySkinManager.get_skin_url(self.ely_session['username'])
                if skin_url:
                    skin_data = requests.get(skin_url).content
                    skin_path = os.path.join(SKINS_DIR, f'{self.username.text()}.png')

                    os.makedirs(SKINS_DIR, exist_ok=True)
                    with open(skin_path, 'wb') as f:
                        f.write(skin_data)

                    QMessageBox.information(self, '–£—Å–ø–µ—Ö', message)
                else:
                    QMessageBox.warning(
                        self,
                        '–û—à–∏–±–∫–∞',
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫–∏–Ω',
                    )
            else:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', message)

        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', str(e))

    def reset_ely_skin(self, parent_dialog):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∫–∏–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
        parent_dialog.close()

        try:
            success, message = ElySkinManager.reset_skin(self.ely_session['token'])
            if success:
                # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Å–∫–∏–Ω–∞
                skin_path = os.path.join(SKINS_DIR, f'{self.username.text()}.png')
                if os.path.exists(skin_path):
                    os.remove(skin_path)

                QMessageBox.information(self, '–£—Å–ø–µ—Ö', message)
            else:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', message)
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', str(e))

    def update_version_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        current_text = self.version_select.currentText()
        self.version_select.clear()

        versions = get_version_list()
        show_only_favorites = self.version_type_select.currentText() == '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ'
        show_snapshots = self.settings.get('show_snapshots', False)

        for version in versions:
            if version['type'] == 'release' or (show_snapshots and version['type'] == 'snapshot'):
                version_id = version['id']
                if not show_only_favorites or version_id in self.favorites:
                    self.version_select.addItem(version_id)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if current_text and self.version_select.findText(current_text) >= 0:
            self.version_select.setCurrentText(current_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.update_favorite_button()

    def toggle_sidebar(self):
        is_visible = self.sidebar.isVisible()
        self.sidebar.setVisible(not is_visible)

        # –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if is_visible:
            self.toggle_sidebar_button.setIcon(
                QIcon(resource_path('assets/toggle_open.png')),
            )
        else:
            self.toggle_sidebar_button.setIcon(
                QIcon(resource_path('assets/toggle_close.png')),
            )

    def toggle_favorite(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        version = self.version_select.currentText()
        if not version:
            return

        if version in self.favorites:
            self.favorites.remove(version)
        else:
            self.favorites.append(version)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        self.settings['favorites'] = self.favorites
        save_settings(self.settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π (–µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö)
        self.update_favorite_button()
        if self.version_type_select.currentText() == '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ':
            self.update_version_list()

    def update_favorite_button(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        version = self.version_select.currentText()
        if not version:
            self.favorite_button.setChecked(False)
            self.favorite_button.setEnabled(False)
            return

        self.favorite_button.setEnabled(True)
        self.favorite_button.setChecked(version in self.favorites)
        self.favorite_button.setStyleSheet(
            'QPushButton {color: %s;}' % ('gold' if version in self.favorites else 'gray'),
        )

    def get_selected_memory(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return self.settings_tab.memory_slider.value() * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ì–ë –≤ –ú–ë

    def show_funny_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+D"""
        self.motd_label.setText('üí¨ <i>–Æ–ª—è –ø–∏—Å—å–∫–∞</i>')
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        QTimer.singleShot(3000, self.show_message_of_the_day)

    def show_funny_message_1(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+D"""
        self.motd_label.setText('üí¨ <i>–ï—Ä—É –¢—É–∫–∞—à</i>')
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        QTimer.singleShot(3000, self.show_message_of_the_day)

    def show_funny_message_2(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+D"""
        self.motd_label.setText('üí¨ <i>Sosun TheNerfi</i>')
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        QTimer.singleShot(3000, self.show_message_of_the_day)

    def show_funny_message_3(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–±–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+D"""
        self.motd_label.setText('üí¨ <i>–ú–∞—Ä–∞—Ç –ø–µ–¥–∏–∫</i>')
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        QTimer.singleShot(3000, self.show_message_of_the_day)

    def load_skin(self):
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∫–∏–Ω–∞
        source_dialog = QDialog(self)
        source_dialog.setWindowTitle('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∫–∏–Ω–∞')
        source_dialog.setFixedSize(300, 200)

        layout = QVBoxLayout()

        label = QLabel('–û—Ç–∫—É–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–Ω?')
        layout.addWidget(label)

        local_button = QPushButton('–° –∫–æ–º–ø—å—é—Ç–µ—Ä–∞')
        layout.addWidget(local_button)

        elyby_button = QPushButton('–° Ely.by')
        layout.addWidget(elyby_button)

        source_dialog.setLayout(layout)

        def load_from_local():
            source_dialog.close()
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                '–í—ã–±–µ—Ä–∏ PNG-—Ñ–∞–π–ª —Å–∫–∏–Ω–∞',
                '',
                'PNG —Ñ–∞–π–ª—ã (*.png)',
            )
            if file_path:
                try:
                    os.makedirs(SKINS_DIR, exist_ok=True)
                    dest_path = os.path.join(
                        SKINS_DIR,
                        f'{self.username.text().strip()}.png',
                    )
                    shutil.copy(file_path, dest_path)
                    QMessageBox.information(
                        self,
                        '–°–∫–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω',
                        '–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!',
                    )
                except Exception as e:
                    logging.exception(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–Ω–∞: {e}')
                    QMessageBox.critical(
                        self,
                        '–û—à–∏–±–∫–∞',
                        f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–Ω: {e}',
                    )

        def load_from_elyby():
            source_dialog.close()
            username = self.username.text().strip()
            if not username:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!')
                return

            if ElyBySkinManager.download_skin(username):
                QMessageBox.information(
                    self,
                    '–°–∫–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω',
                    '–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å Ely.by!',
                )
            else:
                ElyBySkinManager.authorize_and_get_skin(self, username)

        local_button.clicked.connect(load_from_local)
        elyby_button.clicked.connect(load_from_elyby)

        source_dialog.exec_()

    def get_ely_skin(username):
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Å–∫–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Ely.by"""
        try:
            response = requests.get(
                f'https://skinsystem.ely.by/skins/{username}.png',
                allow_redirects=False,
            )
            if response.status_code == 200:
                return f'https://skinsystem.ely.by/skins/{username}.png'
            return None
        except Exception as e:
            logging.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∏–Ω–∞: {e}')
            return None

    def reset_ely_skin(access_token):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∫–∏–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"""
        try:
            headers = {'Authorization': f'Bearer {access_token}'}
            response = requests.delete(
                'https://skinsystem.ely.by/upload',
                headers=headers,
            )

            if response.status_code == 200:
                return True, '–°–∫–∏–Ω —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π!'
            return (
                False,
                f'–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–∫–∏–Ω–∞: {response.json().get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}',
            )
        except Exception as e:
            return False, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–∫–∏–Ω–∞: {e!s}'

    def load_user_data(self):
        if os.path.exists(self.user_data_path):
            try:
                with open(self.user_data_path, encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logging.info('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data:', e)
        return {'launch_count': 0, 'achievements': []}

    def save_user_data(self):
        try:
            with open(self.user_data_path, 'w', encoding='utf-8') as f:
                json.dump(self.user_data, f, indent=4)
        except Exception as e:
            logging.info('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data:', e)

    def increment_launch_count(self):
        self.user_data['launch_count'] += 1
        count = self.user_data['launch_count']
        logging.info(f'üöÄ –ó–∞–ø—É—Å–∫ ‚Ññ{count}')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if count >= 1 and 'first_launch' not in self.user_data['achievements']:
            self.user_data['achievements'].append('first_launch')
        if count >= 5 and 'five_launches' not in self.user_data['achievements']:
            self.user_data['achievements'].append('five_launches')

        self.save_user_data()

    def set_random_username(self):
        self.username.setText(generate_random_username())

    def setup_modloader_tabs(self):
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self.forge_tab = ModLoaderTab('forge')
        self.tabs.addTab(self.forge_tab, 'Forge')

        self.fabric_tab = ModLoaderTab('fabric')
        self.tabs.addTab(self.fabric_tab, 'Fabric')

        self.optifine_tab = ModLoaderTab('optifine')
        self.tabs.addTab(self.optifine_tab, 'OptiFine')

        self.quilt_tab = ModLoaderTab('quilt')
        self.tabs.addTab(self.quilt_tab, 'Quilt')

    def apply_dark_theme(self, dark_theme=True):
        dark_theme_css = """
        QMainWindow {
            background-color: #2e2e2e;
        }
        QWidget {
            background-color: #2e2e2e;
            color: #f1f1f1;
        }
        QLineEdit {
            background-color: #444444;
            color: #f1f1f1;
            border: 1px solid #555555;
            padding: 10px 30px 10px 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QLineEdit:focus {
            border-color: #a1a1a1;
        }
        QPushButton {
            background-color: #444444;
            color: #f1f1f1;
            border: 1px solid #555555;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QPushButton:hover {
            background-color: #666666;
            transform: scale(1.1);
        }
        QPushButton:focus {
            border-color: #a1a1a1;
        }
        QToolButton {
            background-color: transparent;
            border: none;
            padding: 0;
        }
        QToolButton:hover {
            background-color: #666;
            border-radius: 3px;
        }
        QComboBox {
            background-color: #444444;
            color: #f1f1f1;
            border: 1px solid #555555;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QComboBox::drop-down {
            subcontrol-origin: padding;
            subcontrol-position: top right;
            width: 30px;
            border-left: 1px solid #555;
            background: #555;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }
        QComboBox QAbstractItemView {
            background-color: #333;
            color: #f1f1f1;
            selection-background-color: #555;
            border: 1px solid #444;
            padding: 5px;
            outline: none;
        }
        QProgressBar {
            border: 1px solid #555555;
            background-color: #333333;
            color: #f1f1f1;
        }
        QSlider::groove:horizontal {
            background: #383838;
            height: 6px;
            border-radius: 3px;
        }

        QSlider::sub-page:horizontal {
            background: #505050;
            border-radius: 3px;
        }

        QSlider::add-page:horizontal {
            background: #282828;
            border-radius: 3px;
        }

        QSlider::handle:horizontal {
            background: #ffffff;
            width: 16px;
            height: 16px;
            margin: -4px 0;
            border-radius: 8px;
            border: 2px solid #3a7bd5;
        }

        QSlider::handle:horizontal:hover {
            background: #f0f0f0;
        }
        QTabWidget::pane {
            border: 1px solid #444;
            background: #333;
        }
        QTabBar::tab {
            background: #444;
            color: #fff;
            padding: 8px;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
        }
        QTabBar::tab:selected {
            background: #555;
            border-color: #666;
        }
        QFrame {
            background-color: #252525;
            border-right: 1px solid #444;
        }
        QScrollBar:vertical {
            border: none;
            background: #2e2e2e;
            width: 12px;
            margin: 0px 0px 0px 0px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical {
            background: #555555;
            min-height: 20px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical:hover {
            background: #777777;
        }
        """

        vertical_slider_style = """
        QSlider::groove:vertical {
            background: #383838;
            width: 8px;
            border-radius: 4px;
            margin: 4px 0;
        }

        QSlider::sub-page:vertical {
            background: qlineargradient(x1:0, y1:1, x2:0, y2:0,
                stop:0 #3a7bd5, stop:1 #00d2ff);
            border-radius: 4px;
        }

        QSlider::handle:vertical {
            background: #ffffff;
            width: 20px;
            height: 20px;
            margin: 0 -6px;
            border-radius: 10px;
            border: 2px solid #3a7bd5;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
    """

        light_theme_css = """
        QMainWindow {
            background-color: #f5f5f5;
        }
        QWidget {
            background-color: #f5f5f5;
            color: #333333;
        }
        QLineEdit {
            background-color: #ffffff;
            color: #333333;
            border: 1px solid #cccccc;
            padding: 10px 30px 10px 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QLineEdit:focus {
            border-color: #66afe9;
        }
        QPushButton {
            background-color: #e0e0e0;
            color: #333333;
            border: 1px solid #cccccc;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QPushButton:hover {
            background-color: #d0d0d0;
            transform: scale(1.1);
        }
        QPushButton:focus {
            border-color: #66afe9;
        }
        QToolButton {
            background-color: transparent;
            border: none;
            padding: 0;
        }
        QToolButton:hover {
            background-color: #d0d0d0;
            border-radius: 3px;
        }
        QComboBox {
            background-color: #ffffff;
            color: #333333;
            border: 1px solid #cccccc;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
        }
        QComboBox::drop-down {
            subcontrol-origin: padding;
            subcontrol-position: top right;
            width: 30px;
            border-left: 1px solid #cccccc;
            background: #e0e0e0;
            border-top-right-radius: 10px;
            border-bottom-right-radius: 10px;
        }
        QComboBox QAbstractItemView {
            background-color: #ffffff;
            color: #333333;
            selection-background-color: #e0e0e0;
            border: 1px solid #cccccc;
            padding: 5px;
            outline: none;
        }
        QProgressBar {
            border: 1px solid #cccccc;
            background-color: #ffffff;
            color: #333333;
        }
        QSlider::groove:horizontal {
            background: #e0e0e0;
            height: 6px;
            border-radius: 3px;
            border: 1px solid #cccccc;
        }
        QSlider::handle:horizontal {
            background: qradialgradient(cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5,
                                    stop:0 #f0f0f0, stop:0.5 #d0d0d0, stop:1 #f0f0f0);
            width: 16px;
            height: 16px;
            margin: -6px 0;
            border-radius: 8px;
            border: 1px solid #aaaaaa;
        }
        QSlider::sub-page:horizontal {
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                    stop:0 #3a7bd5, stop:1 #00d2ff);
            border-radius: 3px;
        }
        QTabWidget::pane {
            border: 1px solid #cccccc;
            background: #ffffff;
        }
        QTabBar::tab {
            background: #e0e0e0;
            color: #333333;
            padding: 8px;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
        }
        QTabBar::tab:selected {
            background: #ffffff;
            border-color: #cccccc;
        }
        QFrame {
            background-color: #f0f0f0;
            border-right: 1px solid #cccccc;
        }
        QScrollBar:vertical {
            border: none;
            background: #f5f5f5;
            width: 12px;
            margin: 0px 0px 0px 0px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical {
            background: #c0c0c0;
            min-height: 20px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical:hover {
            background: #a0a0a0;
        }
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
        self.setStyleSheet(dark_theme_css if dark_theme else light_theme_css)
        self.current_theme = 'dark' if dark_theme else 'light'

        # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        icon_suffix = '' if dark_theme else '_dark'

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(self, 'theme_button'):
            self.theme_button.setIcon(
                QIcon(resource_path(f'assets/sun{icon_suffix}.png')),
            )
        if hasattr(self, 'settings_button'):
            self.settings_button.setIcon(
                QIcon(resource_path(f'assets/set64{icon_suffix}.png')),
            )

        if hasattr(self, 'telegram_button'):
            self.telegram_button.setIcon(
                QIcon(resource_path(f'assets/tg{icon_suffix}.png')),
            )
        if hasattr(self, 'support_button'):
            self.support_button.setIcon(
                QIcon(resource_path(f'assets/support64{icon_suffix}.png')),
            )
        if hasattr(self, 'play_button'):
            self.play_button.setIcon(
                QIcon(resource_path(f'assets/play64{icon_suffix}.png')),
            )
        if hasattr(self, 'toggle_sidebar_button'):
            is_visible = self.sidebar.isVisible()
            icon_name = 'toggle_open' if is_visible else 'toggle_close'
            self.toggle_sidebar_button.setIcon(
                QIcon(resource_path(f'assets/{icon_name}{icon_suffix}.png')),
            )
        if hasattr(self, 'random_name_button'):
            self.random_name_button.setIcon(
                QIcon(resource_path(f'assets/random{icon_suffix}.png')),
            )
        if hasattr(self, 'open_folder_button'):
            self.open_folder_button.setIcon(
                QIcon(resource_path(f'assets/folder{icon_suffix}.png')),
            )
        if hasattr(self, 'favorite_button'):
            # –î–ª—è –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –≤–º–µ—Å—Ç–æ –∏–∫–æ–Ω–∫–∏
            version = self.version_select.currentText()
            if version:
                self.favorite_button.setStyleSheet(
                    'QPushButton {color: %s;}' % ('gold' if version in self.favorites else 'gray'),
                )
        if hasattr(self, 'ely_button'):
            # –î–ª—è –∫–Ω–æ–ø–∫–∏ Ely.by –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
            self.ely_button.setIcon(QIcon(resource_path('assets/account.png')))
        if hasattr(self, 'skin_button'):
            # –î–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
            self.skin_button.setIcon(QIcon(resource_path('assets/change_name.png')))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if hasattr(self, 'settings_tab'):
            if hasattr(self.settings_tab, 'theme_button'):
                self.settings_tab.theme_button.setIcon(
                    QIcon(resource_path(f'assets/sun{icon_suffix}.png')),
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç MOTD-—Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(self, 'motd_label'):
            color = '#aaaaaa' if dark_theme else '#666666'
            self.motd_label.setStyleSheet(f"""
                color: {color};
                font-style: italic;
                font-size: 14px;
                background: transparent;
                padding: 5px;
            """)

    def closeEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        current_version = self.version_select.currentText()
        if current_version:
            self.settings['last_version'] = current_version
            self.settings['last_loader'] = self.loader_select.currentData()
            self.settings['show_snapshots'] = self.settings_tab.show_snapshots_checkbox.isChecked()
            self.settings['show_motd'] = self.settings_tab.motd_checkbox.isChecked()

        self.settings['last_username'] = self.username.text().strip()
        save_settings(self.settings)
        event.accept()

    def close_launcher(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
        self.close()

    def launch_game(self):
        try:
            username = self.username.text().strip()
            if not username:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!')
                return

            version = self.version_select.currentText()
            loader_type = self.loader_select.currentData()
            memory_mb = self.get_selected_memory()
            close_on_launch = self.settings_tab.close_on_launch_checkbox.isChecked()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.settings['last_version'] = version
            self.settings['last_loader'] = loader_type
            save_settings(self.settings)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            if self.settings.get("enable_console", False):
                self.console_output.clear()
                self.console_output.setVisible(True)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.start_progress_label.setText('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...')
            self.start_progress_label.setVisible(True)
            self.start_progress.setVisible(True)
            QApplication.processEvents()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.launch_thread.launch_setup(
                version, username, loader_type, memory_mb, close_on_launch
            )
            self.launch_thread.start()

        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', str(e))


    def update_progress(self, current, total, text):
        self.start_progress.setMaximum(total)
        self.start_progress.setValue(current)
        if text:
            self.start_progress_label.setText(text)

    def state_update(self, is_running):
        if is_running:
            self.start_button.setEnabled(False)
        else:
            self.start_button.setEnabled(True)
            self.start_progress_label.setVisible(False)
            self.start_progress.setVisible(False)

            # –ï—Å–ª–∏ –∫–æ–Ω—Å–æ–ª—å –≤–∫–ª—é—á–µ–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–æ "—É–±–∏—Ä–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
            if self.settings.get("enable_console", False) and \
            self.settings.get("hide_console_after_launch", False):
                self.console_output.setVisible(False)

    def show_message_of_the_day(self):
        if hasattr(self, 'motd_label') and self.settings.get('show_motd', True):
            message = random.choice(self.motd_messages)
            self.motd_label.setText(f'üí¨ <i>{message}</i>')
        else:
            self.motd_label.clear()

    def open_root_folder(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é MINECRAFT_DIR, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–≥—Ä—ã
        folder = MINECRAFT_DIR

        if platform.system() == 'Windows':
            subprocess.Popen(f'explorer "{folder}"')
        elif platform.system() == 'Darwin':
            subprocess.Popen(['open', folder])
        else:
            subprocess.Popen(['xdg-open', folder])
