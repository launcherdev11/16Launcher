#!/usr/bin/env python3

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞ 16Launcher

import os
import sys
import subprocess
import shutil
from datetime import datetime
import zipfile

APP_NAME = "16Launcher"
APP_VERSION = "1.0.3"

def print_status(message):
    print(f"üîß {message}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def create_release():
    print("=" * 50)
    print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ {APP_NAME} v{APP_VERSION}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–ª–∏–∑–∞
    release_dir = f"release_{APP_VERSION}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(release_dir, exist_ok=True)
    
    print_status("–°–±–æ—Ä–∫–∞ –¥–ª—è Windows...")
    try:
        subprocess.run([sys.executable, "build.py", "--platform", "windows", "--installer"], check=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º Windows —Ñ–∞–π–ª—ã
        if os.path.exists("dist/16Launcher.exe"):
            shutil.copy2("dist/16Launcher.exe", f"{release_dir}/16Launcher_Windows.exe")
            print_success("Windows .exe —Å–æ–∑–¥–∞–Ω")
        
        if os.path.exists("installer_output/16Launcher_Setup.exe"):
            shutil.copy2("installer_output/16Launcher_Setup.exe", f"{release_dir}/16Launcher_Windows_Installer.exe")
            print_success("Windows —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω")
            
    except subprocess.CalledProcessError:
        print_error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Windows")
    
    print_status("–°–±–æ—Ä–∫–∞ –¥–ª—è Linux...")
    try:
        subprocess.run([sys.executable, "build.py", "--platform", "linux"], check=True)
        
        if os.path.exists("dist/16Launcher"):
            shutil.copy2("dist/16Launcher", f"{release_dir}/16Launcher_Linux")
            print_success("Linux –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            
    except subprocess.CalledProcessError:
        print_error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Linux")
    
    print_status("–°–±–æ—Ä–∫–∞ –¥–ª—è macOS...")
    try:
        subprocess.run([sys.executable, "build.py", "--platform", "macos"], check=True)
        
        if os.path.exists("dist/16Launcher"):
            shutil.copytree("dist/16Launcher", f"{release_dir}/16Launcher_macOS.app", dirs_exist_ok=True)
            print_success("macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω")
            
    except subprocess.CalledProcessError:
        print_error("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ macOS")
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è —Ä–µ–ª–∏–∑–∞
    readme_content = f"""# {APP_NAME} v{APP_VERSION}

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### Windows
- **–ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞**: –ó–∞–ø—É—Å—Ç–∏—Ç–µ `16Launcher_Windows_Installer.exe`
- **–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è**: –ó–∞–ø—É—Å—Ç–∏—Ç–µ `16Launcher_Windows.exe`

### Linux
1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º: `chmod +x 16Launcher_Linux`
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `./16Launcher_Linux`

### macOS
1. –û—Ç–∫—Ä–æ–π—Ç–µ `16Launcher_macOS.app`
2. –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

- **Windows**: Windows 10/11
- **Linux**: Ubuntu 18.04+, CentOS 7+, –∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã
- **macOS**: macOS 10.13+

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- –°–∞–π—Ç: https://16launcher.ru
- Discord: [—Å—Å—ã–ª–∫–∞ –Ω–∞ Discord]
- Telegram: [—Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram]

---
–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    with open(f"{release_dir}/README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    zip_name = f"{APP_NAME}_v{APP_VERSION}_Release.zip"
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(release_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arc_path = os.path.relpath(file_path, release_dir)
                zipf.write(file_path, arc_path)
    
    print_success(f"–†–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: {zip_name}")
    print_success(f"–ü–∞–ø–∫–∞ —Ä–µ–ª–∏–∑–∞: {release_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    print("\nüìä –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
    for file in os.listdir(release_dir):
        file_path = os.path.join(release_dir, file)
        if os.path.isfile(file_path):
            size_mb = os.path.getsize(file_path) / (1024 * 1024)
            print(f"  {file}: {size_mb:.1f} –ú–ë")
    
    print(f"\nüéâ –†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤! –ó–∞–≥—Ä—É–∑–∏—Ç–µ {zip_name} –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")

if __name__ == "__main__":
    create_release()

